import JSZip from 'jszip';
import { AnyPattern, emitCLWDPAT, emitPFPRSDRV, emitPFPARSER, emitPFTABMNT } from '@/engine/patterns';

export interface CompileOptions {
  releaseTag: string;
  countryCode: string;
  commentChar: string;
  parserParams: Record<string, string | number>;
  driverPaths: {
    inp: string;
    outp: string;
    pfparser: string;
    stat: string;
    ddlIn: string;
    ddlPrepos: string;
    ddlOut: string;
    rIn?: string;
    rPrepos?: string;
    rOut?: string;
    printNth?: number;
  };
}

export async function generateReleaseZip(
  patterns: AnyPattern[],
  options: CompileOptions
): Promise<Blob> {
  const zip = new JSZip();

  // Generate CLWDPAT
  const clwdpat = emitCLWDPAT(patterns, {
    header: `${options.releaseTag} - Generated by Trillium Parser Tuning Engine`,
    commentChar: options.commentChar
  });
  zip.file('CLWDPAT', clwdpat);

  // Generate PFPRSDRV.PAR (driver parms)
  const pfprsdrv = emitPFPRSDRV(options.driverPaths);
  zip.file('PFPRSDRV.PAR', pfprsdrv);

  // Generate PFPARSER.PAR (parser parms)
  const pfparser = emitPFPARSER(options.parserParams);
  zip.file('PFPARSER.PAR', pfparser);

  // Generate pftabmnt<CC>.par (Table Maintenance)
  const pftabmnt = emitPFTABMNT({
    countryCode: options.countryCode,
    stddefPath: `./defs/${options.countryCode}WDPAT`,
    clwdpatPath: './release/CLWDPAT',
    cltabdefPath: './release/CLTABDEF',
    cltabpatPath: './release/CLTABPAT'
  });
  zip.file(`pftabmnt${options.countryCode}.par`, pftabmnt);

  // Generate README.md
  const readme = generateReadme(options);
  zip.file('README.md', readme);

  return await zip.generateAsync({ type: 'blob' });
}

function generateReadme(options: CompileOptions): string {
  return `# Trillium Parser Release: ${options.releaseTag}

## Overview
This release package contains pattern definitions and configuration files for the Trillium Customer Data Parser (CDP).

## Files Included
- **CLWDPAT**: Pattern definitions for name and address parsing
- **PFPRSDRV.PAR**: Driver parameter file
- **PFPARSER.PAR**: Parser parameter file  
- **pftabmnt${options.countryCode}.par**: Table Maintenance parameter file

## Installation Instructions

### Step 1: Compile Pattern Tables
Run the Table Maintenance utility to compile CLWDPAT with your STDDEF:

\`\`\`bash
TABMAINT -parmfile pftabmnt${options.countryCode}.par
\`\`\`

This will generate:
- CLTABDEF (compiled table definitions)
- CLTABPAT (compiled patterns)

### Step 2: Configure Parser
1. Place PFPARSER.PAR in your parser parameters directory
2. Ensure PFPRSDRV.PAR points to correct file paths for your environment
3. Update DDL file paths if different from defaults

### Step 3: Run Parser
Execute the parser with the driver parameter file:

\`\`\`bash
pfparser -driver PFPRSDRV.PAR
\`\`\`

## Configuration Details

### Parser Parameters
${Object.entries(options.parserParams).map(([k, v]) => `- ${k}: ${v}`).join('\n')}

### Driver File Paths
- Input: ${options.driverPaths.inp}
- Output: ${options.driverPaths.outp}
- Parser Parms: ${options.driverPaths.pfparser}
- Statistics: ${options.driverPaths.stat}

### Data Dictionary Locations
- Input DDL: ${options.driverPaths.ddlIn}
- Preposition DDL: ${options.driverPaths.ddlPrepos}
- Output DDL: ${options.driverPaths.ddlOut}

## Testing
1. Run parser on a small test dataset first
2. Review statistics file for parse rates
3. Validate output format matches expectations
4. Check logs for any pattern matching issues

## Rollback
To rollback, restore your previous CLTABDEF and CLTABPAT files from backup.

## Support
Generated by Trillium Parser Tuning Engine
Release: ${options.releaseTag}
Country Code: ${options.countryCode}
`;
}
